# Released under the MIT License
#
# Copyright (c) Hackumo (https://github.com/hackumo)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import struct

# 8-bit S-box based on four 4-bit S-boxes
S0 = [
    0x57, 0x49, 0xd1, 0xc6, 0x2f, 0x33, 0x74, 0xfb,
    0x95, 0x6d, 0x82, 0xea, 0x0e, 0xb0, 0xa8, 0x1c,
    0x28, 0xd0, 0x4b, 0x92, 0x5c, 0xee, 0x85, 0xb1,
    0xc4, 0x0a, 0x76, 0x3d, 0x63, 0xf9, 0x17, 0xaf,
    0xbf, 0xa1, 0x19, 0x65, 0xf7, 0x7a, 0x32, 0x20,
    0x06, 0xce, 0xe4, 0x83, 0x9d, 0x5b, 0x4c, 0xd8,
    0x42, 0x5d, 0x2e, 0xe8, 0xd4, 0x9b, 0x0f, 0x13,
    0x3c, 0x89, 0x67, 0xc0, 0x71, 0xaa, 0xb6, 0xf5,
    0xa4, 0xbe, 0xfd, 0x8c, 0x12, 0x00, 0x97, 0xda,
    0x78, 0xe1, 0xcf, 0x6b, 0x39, 0x43, 0x55, 0x26,
    0x30, 0x98, 0xcc, 0xdd, 0xeb, 0x54, 0xb3, 0x8f,
    0x4e, 0x16, 0xfa, 0x22, 0xa5, 0x77, 0x09, 0x61,
    0xd6, 0x2a, 0x53, 0x37, 0x45, 0xc1, 0x6c, 0xae,
    0xef, 0x70, 0x08, 0x99, 0x8b, 0x1d, 0xf2, 0xb4,
    0xe9, 0xc7, 0x9f, 0x4a, 0x31, 0x25, 0xfe, 0x7c,
    0xd3, 0xa2, 0xbd, 0x56, 0x14, 0x88, 0x60, 0x0b,
    0xcd, 0xe2, 0x34, 0x50, 0x9e, 0xdc, 0x11, 0x05,
    0x2b, 0xb7, 0xa9, 0x48, 0xff, 0x66, 0x8a, 0x73,
    0x03, 0x75, 0x86, 0xf1, 0x6a, 0xa7, 0x40, 0xc2,
    0xb9, 0x2c, 0xdb, 0x1f, 0x58, 0x94, 0x3e, 0xed,
    0xfc, 0x1b, 0xa0, 0x04, 0xb8, 0x8d, 0xe6, 0x59,
    0x62, 0x93, 0x35, 0x7e, 0xca, 0x21, 0xdf, 0x47,
    0x15, 0xf3, 0xba, 0x7f, 0xa6, 0x69, 0xc8, 0x4d,
    0x87, 0x3b, 0x9c, 0x01, 0xe0, 0xde, 0x24, 0x52,
    0x7b, 0x0c, 0x68, 0x1e, 0x80, 0xb2, 0x5a, 0xe7,
    0xad, 0xd5, 0x23, 0xf4, 0x46, 0x3f, 0x91, 0xc9,
    0x6e, 0x84, 0x72, 0xbb, 0x0d, 0x18, 0xd9, 0x96,
    0xf0, 0x5f, 0x41, 0xac, 0x27, 0xc5, 0xe3, 0x3a,
    0x81, 0x6f, 0x07, 0xa3, 0x79, 0xf6, 0x2d, 0x38,
    0x1a, 0x44, 0x5e, 0xb5, 0xd2, 0xec, 0xcb, 0x90,
    0x9a, 0x36, 0xe5, 0x29, 0xc3, 0x4f, 0xab, 0x64,
    0x51, 0xf8, 0x10, 0xd7, 0xbc, 0x02, 0x7d, 0x8e
]

# 8-bit S-box based on inverse function
S1 = [
    0x6c, 0xda, 0xc3, 0xe9, 0x4e, 0x9d, 0x0a, 0x3d,
    0xb8, 0x36, 0xb4, 0x38, 0x13, 0x34, 0x0c, 0xd9,
    0xbf, 0x74, 0x94, 0x8f, 0xb7, 0x9c, 0xe5, 0xdc,
    0x9e, 0x07, 0x49, 0x4f, 0x98, 0x2c, 0xb0, 0x93,
    0x12, 0xeb, 0xcd, 0xb3, 0x92, 0xe7, 0x41, 0x60,
    0xe3, 0x21, 0x27, 0x3b, 0xe6, 0x19, 0xd2, 0x0e,
    0x91, 0x11, 0xc7, 0x3f, 0x2a, 0x8e, 0xa1, 0xbc,
    0x2b, 0xc8, 0xc5, 0x0f, 0x5b, 0xf3, 0x87, 0x8b,
    0xfb, 0xf5, 0xde, 0x20, 0xc6, 0xa7, 0x84, 0xce,
    0xd8, 0x65, 0x51, 0xc9, 0xa4, 0xef, 0x43, 0x53,
    0x25, 0x5d, 0x9b, 0x31, 0xe8, 0x3e, 0x0d, 0xd7,
    0x80, 0xff, 0x69, 0x8a, 0xba, 0x0b, 0x73, 0x5c,
    0x6e, 0x54, 0x15, 0x62, 0xf6, 0x35, 0x30, 0x52,
    0xa3, 0x16, 0xd3, 0x28, 0x32, 0xfa, 0xaa, 0x5e,
    0xcf, 0xea, 0xed, 0x78, 0x33, 0x58, 0x09, 0x7b,
    0x63, 0xc0, 0xc1, 0x46, 0x1e, 0xdf, 0xa9, 0x99,
    0x55, 0x04, 0xc4, 0x86, 0x39, 0x77, 0x82, 0xec,
    0x40, 0x18, 0x90, 0x97, 0x59, 0xdd, 0x83, 0x1f,
    0x9a, 0x37, 0x06, 0x24, 0x64, 0x7c, 0xa5, 0x56,
    0x48, 0x08, 0x85, 0xd0, 0x61, 0x26, 0xca, 0x6f,
    0x7e, 0x6a, 0xb6, 0x71, 0xa0, 0x70, 0x05, 0xd1,
    0x45, 0x8c, 0x23, 0x1c, 0xf0, 0xee, 0x89, 0xad,
    0x7a, 0x4b, 0xc2, 0x2f, 0xdb, 0x5a, 0x4d, 0x76,
    0x67, 0x17, 0x2d, 0xf4, 0xcb, 0xb1, 0x4a, 0xa8,
    0xb5, 0x22, 0x47, 0x3a, 0xd5, 0x10, 0x4c, 0x72,
    0xcc, 0x00, 0xf9, 0xe0, 0xfd, 0xe2, 0xfe, 0xae,
    0xf8, 0x5f, 0xab, 0xf1, 0x1b, 0x42, 0x81, 0xd6,
    0xbe, 0x44, 0x29, 0xa6, 0x57, 0xb9, 0xaf, 0xf2,
    0xd4, 0x75, 0x66, 0xbb, 0x68, 0x9f, 0x50, 0x02,
    0x01, 0x3c, 0x7f, 0x8d, 0x1a, 0x88, 0xbd, 0xac,
    0xf7, 0xe4, 0x79, 0x96, 0xa2, 0xfc, 0x6d, 0xb2,
    0x6b, 0x03, 0xe1, 0x2e, 0x7d, 0x14, 0x95, 0x1d
]

# 32-bit constant values CON_k[i] are used in the key scheduling algorithm
CON_128 = [
    0xf56b7aeb, 0x994a8a42, 0x96a4bd75, 0xfa854521,
    0x735b768a, 0x1f7abac4, 0xd5bc3b45, 0xb99d5d62,
    0x52d73592, 0x3ef636e5, 0xc57a1ac9, 0xa95b9b72,
    0x5ab42554, 0x369555ed, 0x1553ba9a, 0x7972b2a2,
    0xe6b85d4d, 0x8a995951, 0x4b550696, 0x2774b4fc,
    0xc9bb034b, 0xa59a5a7e, 0x88cc81a5, 0xe4ed2d3f,
    0x7c6f68e2, 0x104e8ecb, 0xd2263471, 0xbe07c765,
    0x511a3208, 0x3d3bfbe6, 0x1084b134, 0x7ca565a7,
    0x304bf0aa, 0x5c6aaa87, 0xf4347855, 0x9815d543,
    0x4213141a, 0x2e32f2f5, 0xcd180a0d, 0xa139f97a,
    0x5e852d36, 0x32a464e9, 0xc353169b, 0xaf72b274,
    0x8db88b4d, 0xe199593a, 0x7ed56d96, 0x12f434c9,
    0xd37b36cb, 0xbf5a9a64, 0x85ac9b65, 0xe98d4d32,
    0x7adf6582, 0x16fe3ecd, 0xd17e32c1, 0xbd5f9f66,
    0x50b63150, 0x3c9757e7, 0x1052b098, 0x7c73b3a7
]

# Tables to speed up multiplication in GF(2^8)
mul2 = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e,
    0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e,
    0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
    0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
    0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
    0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae,
    0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,
    0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
    0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1d, 0x1f, 0x19, 0x1b, 0x15, 0x17, 0x11, 0x13,
    0x0d, 0x0f, 0x09, 0x0b, 0x05, 0x07, 0x01, 0x03,
    0x3d, 0x3f, 0x39, 0x3b, 0x35, 0x37, 0x31, 0x33,
    0x2d, 0x2f, 0x29, 0x2b, 0x25, 0x27, 0x21, 0x23,
    0x5d, 0x5f, 0x59, 0x5b, 0x55, 0x57, 0x51, 0x53,
    0x4d, 0x4f, 0x49, 0x4b, 0x45, 0x47, 0x41, 0x43,
    0x7d, 0x7f, 0x79, 0x7b, 0x75, 0x77, 0x71, 0x73,
    0x6d, 0x6f, 0x69, 0x6b, 0x65, 0x67, 0x61, 0x63,
    0x9d, 0x9f, 0x99, 0x9b, 0x95, 0x97, 0x91, 0x93,
    0x8d, 0x8f, 0x89, 0x8b, 0x85, 0x87, 0x81, 0x83,
    0xbd, 0xbf, 0xb9, 0xbb, 0xb5, 0xb7, 0xb1, 0xb3,
    0xad, 0xaf, 0xa9, 0xab, 0xa5, 0xa7, 0xa1, 0xa3,
    0xdd, 0xdf, 0xd9, 0xdb, 0xd5, 0xd7, 0xd1, 0xd3,
    0xcd, 0xcf, 0xc9, 0xcb, 0xc5, 0xc7, 0xc1, 0xc3,
    0xfd, 0xff, 0xf9, 0xfb, 0xf5, 0xf7, 0xf1, 0xf3,
    0xed, 0xef, 0xe9, 0xeb, 0xe5, 0xe7, 0xe1, 0xe3
]

mul4 = [
    0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c,
    0x20, 0x24, 0x28, 0x2c, 0x30, 0x34, 0x38, 0x3c,
    0x40, 0x44, 0x48, 0x4c, 0x50, 0x54, 0x58, 0x5c,
    0x60, 0x64, 0x68, 0x6c, 0x70, 0x74, 0x78, 0x7c,
    0x80, 0x84, 0x88, 0x8c, 0x90, 0x94, 0x98, 0x9c,
    0xa0, 0xa4, 0xa8, 0xac, 0xb0, 0xb4, 0xb8, 0xbc,
    0xc0, 0xc4, 0xc8, 0xcc, 0xd0, 0xd4, 0xd8, 0xdc,
    0xe0, 0xe4, 0xe8, 0xec, 0xf0, 0xf4, 0xf8, 0xfc,
    0x1d, 0x19, 0x15, 0x11, 0x0d, 0x09, 0x05, 0x01,
    0x3d, 0x39, 0x35, 0x31, 0x2d, 0x29, 0x25, 0x21,
    0x5d, 0x59, 0x55, 0x51, 0x4d, 0x49, 0x45, 0x41,
    0x7d, 0x79, 0x75, 0x71, 0x6d, 0x69, 0x65, 0x61,
    0x9d, 0x99, 0x95, 0x91, 0x8d, 0x89, 0x85, 0x81,
    0xbd, 0xb9, 0xb5, 0xb1, 0xad, 0xa9, 0xa5, 0xa1,
    0xdd, 0xd9, 0xd5, 0xd1, 0xcd, 0xc9, 0xc5, 0xc1,
    0xfd, 0xf9, 0xf5, 0xf1, 0xed, 0xe9, 0xe5, 0xe1,
    0x3a, 0x3e, 0x32, 0x36, 0x2a, 0x2e, 0x22, 0x26,
    0x1a, 0x1e, 0x12, 0x16, 0x0a, 0x0e, 0x02, 0x06,
    0x7a, 0x7e, 0x72, 0x76, 0x6a, 0x6e, 0x62, 0x66,
    0x5a, 0x5e, 0x52, 0x56, 0x4a, 0x4e, 0x42, 0x46,
    0xba, 0xbe, 0xb2, 0xb6, 0xaa, 0xae, 0xa2, 0xa6,
    0x9a, 0x9e, 0x92, 0x96, 0x8a, 0x8e, 0x82, 0x86,
    0xfa, 0xfe, 0xf2, 0xf6, 0xea, 0xee, 0xe2, 0xe6,
    0xda, 0xde, 0xd2, 0xd6, 0xca, 0xce, 0xc2, 0xc6,
    0x27, 0x23, 0x2f, 0x2b, 0x37, 0x33, 0x3f, 0x3b,
    0x07, 0x03, 0x0f, 0x0b, 0x17, 0x13, 0x1f, 0x1b,
    0x67, 0x63, 0x6f, 0x6b, 0x77, 0x73, 0x7f, 0x7b,
    0x47, 0x43, 0x4f, 0x4b, 0x57, 0x53, 0x5f, 0x5b,
    0xa7, 0xa3, 0xaf, 0xab, 0xb7, 0xb3, 0xbf, 0xbb,
    0x87, 0x83, 0x8f, 0x8b, 0x97, 0x93, 0x9f, 0x9b,
    0xe7, 0xe3, 0xef, 0xeb, 0xf7, 0xf3, 0xff, 0xfb,
    0xc7, 0xc3, 0xcf, 0xcb, 0xd7, 0xd3, 0xdf, 0xdb
]

mul6 = [
    0x00, 0x06, 0x0c, 0x0a, 0x18, 0x1e, 0x14, 0x12,
    0x30, 0x36, 0x3c, 0x3a, 0x28, 0x2e, 0x24, 0x22,
    0x60, 0x66, 0x6c, 0x6a, 0x78, 0x7e, 0x74, 0x72,
    0x50, 0x56, 0x5c, 0x5a, 0x48, 0x4e, 0x44, 0x42,
    0xc0, 0xc6, 0xcc, 0xca, 0xd8, 0xde, 0xd4, 0xd2,
    0xf0, 0xf6, 0xfc, 0xfa, 0xe8, 0xee, 0xe4, 0xe2,
    0xa0, 0xa6, 0xac, 0xaa, 0xb8, 0xbe, 0xb4, 0xb2,
    0x90, 0x96, 0x9c, 0x9a, 0x88, 0x8e, 0x84, 0x82,
    0x9d, 0x9b, 0x91, 0x97, 0x85, 0x83, 0x89, 0x8f,
    0xad, 0xab, 0xa1, 0xa7, 0xb5, 0xb3, 0xb9, 0xbf,
    0xfd, 0xfb, 0xf1, 0xf7, 0xe5, 0xe3, 0xe9, 0xef,
    0xcd, 0xcb, 0xc1, 0xc7, 0xd5, 0xd3, 0xd9, 0xdf,
    0x5d, 0x5b, 0x51, 0x57, 0x45, 0x43, 0x49, 0x4f,
    0x6d, 0x6b, 0x61, 0x67, 0x75, 0x73, 0x79, 0x7f,
    0x3d, 0x3b, 0x31, 0x37, 0x25, 0x23, 0x29, 0x2f,
    0x0d, 0x0b, 0x01, 0x07, 0x15, 0x13, 0x19, 0x1f,
    0x27, 0x21, 0x2b, 0x2d, 0x3f, 0x39, 0x33, 0x35,
    0x17, 0x11, 0x1b, 0x1d, 0x0f, 0x09, 0x03, 0x05,
    0x47, 0x41, 0x4b, 0x4d, 0x5f, 0x59, 0x53, 0x55,
    0x77, 0x71, 0x7b, 0x7d, 0x6f, 0x69, 0x63, 0x65,
    0xe7, 0xe1, 0xeb, 0xed, 0xff, 0xf9, 0xf3, 0xf5,
    0xd7, 0xd1, 0xdb, 0xdd, 0xcf, 0xc9, 0xc3, 0xc5,
    0x87, 0x81, 0x8b, 0x8d, 0x9f, 0x99, 0x93, 0x95,
    0xb7, 0xb1, 0xbb, 0xbd, 0xaf, 0xa9, 0xa3, 0xa5,
    0xba, 0xbc, 0xb6, 0xb0, 0xa2, 0xa4, 0xae, 0xa8,
    0x8a, 0x8c, 0x86, 0x80, 0x92, 0x94, 0x9e, 0x98,
    0xda, 0xdc, 0xd6, 0xd0, 0xc2, 0xc4, 0xce, 0xc8,
    0xea, 0xec, 0xe6, 0xe0, 0xf2, 0xf4, 0xfe, 0xf8,
    0x7a, 0x7c, 0x76, 0x70, 0x62, 0x64, 0x6e, 0x68,
    0x4a, 0x4c, 0x46, 0x40, 0x52, 0x54, 0x5e, 0x58,
    0x1a, 0x1c, 0x16, 0x10, 0x02, 0x04, 0x0e, 0x08,
    0x2a, 0x2c, 0x26, 0x20, 0x32, 0x34, 0x3e, 0x38
]

mul8 = [
    0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
    0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
    0x80, 0x88, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8,
    0xc0, 0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8,
    0x1d, 0x15, 0x0d, 0x05, 0x3d, 0x35, 0x2d, 0x25,
    0x5d, 0x55, 0x4d, 0x45, 0x7d, 0x75, 0x6d, 0x65,
    0x9d, 0x95, 0x8d, 0x85, 0xbd, 0xb5, 0xad, 0xa5,
    0xdd, 0xd5, 0xcd, 0xc5, 0xfd, 0xf5, 0xed, 0xe5,
    0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12, 0x0a, 0x02,
    0x7a, 0x72, 0x6a, 0x62, 0x5a, 0x52, 0x4a, 0x42,
    0xba, 0xb2, 0xaa, 0xa2, 0x9a, 0x92, 0x8a, 0x82,
    0xfa, 0xf2, 0xea, 0xe2, 0xda, 0xd2, 0xca, 0xc2,
    0x27, 0x2f, 0x37, 0x3f, 0x07, 0x0f, 0x17, 0x1f,
    0x67, 0x6f, 0x77, 0x7f, 0x47, 0x4f, 0x57, 0x5f,
    0xa7, 0xaf, 0xb7, 0xbf, 0x87, 0x8f, 0x97, 0x9f,
    0xe7, 0xef, 0xf7, 0xff, 0xc7, 0xcf, 0xd7, 0xdf,
    0x74, 0x7c, 0x64, 0x6c, 0x54, 0x5c, 0x44, 0x4c,
    0x34, 0x3c, 0x24, 0x2c, 0x14, 0x1c, 0x04, 0x0c,
    0xf4, 0xfc, 0xe4, 0xec, 0xd4, 0xdc, 0xc4, 0xcc,
    0xb4, 0xbc, 0xa4, 0xac, 0x94, 0x9c, 0x84, 0x8c,
    0x69, 0x61, 0x79, 0x71, 0x49, 0x41, 0x59, 0x51,
    0x29, 0x21, 0x39, 0x31, 0x09, 0x01, 0x19, 0x11,
    0xe9, 0xe1, 0xf9, 0xf1, 0xc9, 0xc1, 0xd9, 0xd1,
    0xa9, 0xa1, 0xb9, 0xb1, 0x89, 0x81, 0x99, 0x91,
    0x4e, 0x46, 0x5e, 0x56, 0x6e, 0x66, 0x7e, 0x76,
    0x0e, 0x06, 0x1e, 0x16, 0x2e, 0x26, 0x3e, 0x36,
    0xce, 0xc6, 0xde, 0xd6, 0xee, 0xe6, 0xfe, 0xf6,
    0x8e, 0x86, 0x9e, 0x96, 0xae, 0xa6, 0xbe, 0xb6,
    0x53, 0x5b, 0x43, 0x4b, 0x73, 0x7b, 0x63, 0x6b,
    0x13, 0x1b, 0x03, 0x0b, 0x33, 0x3b, 0x23, 0x2b,
    0xd3, 0xdb, 0xc3, 0xcb, 0xf3, 0xfb, 0xe3, 0xeb,
    0x93, 0x9b, 0x83, 0x8b, 0xb3, 0xbb, 0xa3, 0xab
]

mulA = [
    0x00, 0x0a, 0x14, 0x1e, 0x28, 0x22, 0x3c, 0x36,
    0x50, 0x5a, 0x44, 0x4e, 0x78, 0x72, 0x6c, 0x66,
    0xa0, 0xaa, 0xb4, 0xbe, 0x88, 0x82, 0x9c, 0x96,
    0xf0, 0xfa, 0xe4, 0xee, 0xd8, 0xd2, 0xcc, 0xc6,
    0x5d, 0x57, 0x49, 0x43, 0x75, 0x7f, 0x61, 0x6b,
    0x0d, 0x07, 0x19, 0x13, 0x25, 0x2f, 0x31, 0x3b,
    0xfd, 0xf7, 0xe9, 0xe3, 0xd5, 0xdf, 0xc1, 0xcb,
    0xad, 0xa7, 0xb9, 0xb3, 0x85, 0x8f, 0x91, 0x9b,
    0xba, 0xb0, 0xae, 0xa4, 0x92, 0x98, 0x86, 0x8c,
    0xea, 0xe0, 0xfe, 0xf4, 0xc2, 0xc8, 0xd6, 0xdc,
    0x1a, 0x10, 0x0e, 0x04, 0x32, 0x38, 0x26, 0x2c,
    0x4a, 0x40, 0x5e, 0x54, 0x62, 0x68, 0x76, 0x7c,
    0xe7, 0xed, 0xf3, 0xf9, 0xcf, 0xc5, 0xdb, 0xd1,
    0xb7, 0xbd, 0xa3, 0xa9, 0x9f, 0x95, 0x8b, 0x81,
    0x47, 0x4d, 0x53, 0x59, 0x6f, 0x65, 0x7b, 0x71,
    0x17, 0x1d, 0x03, 0x09, 0x3f, 0x35, 0x2b, 0x21,
    0x69, 0x63, 0x7d, 0x77, 0x41, 0x4b, 0x55, 0x5f,
    0x39, 0x33, 0x2d, 0x27, 0x11, 0x1b, 0x05, 0x0f,
    0xc9, 0xc3, 0xdd, 0xd7, 0xe1, 0xeb, 0xf5, 0xff,
    0x99, 0x93, 0x8d, 0x87, 0xb1, 0xbb, 0xa5, 0xaf,
    0x34, 0x3e, 0x20, 0x2a, 0x1c, 0x16, 0x08, 0x02,
    0x64, 0x6e, 0x70, 0x7a, 0x4c, 0x46, 0x58, 0x52,
    0x94, 0x9e, 0x80, 0x8a, 0xbc, 0xb6, 0xa8, 0xa2,
    0xc4, 0xce, 0xd0, 0xda, 0xec, 0xe6, 0xf8, 0xf2,
    0xd3, 0xd9, 0xc7, 0xcd, 0xfb, 0xf1, 0xef, 0xe5,
    0x83, 0x89, 0x97, 0x9d, 0xab, 0xa1, 0xbf, 0xb5,
    0x73, 0x79, 0x67, 0x6d, 0x5b, 0x51, 0x4f, 0x45,
    0x23, 0x29, 0x37, 0x3d, 0x0b, 0x01, 0x1f, 0x15,
    0x8e, 0x84, 0x9a, 0x90, 0xa6, 0xac, 0xb2, 0xb8,
    0xde, 0xd4, 0xca, 0xc0, 0xf6, 0xfc, 0xe2, 0xe8,
    0x2e, 0x24, 0x3a, 0x30, 0x06, 0x0c, 0x12, 0x18,
    0x7e, 0x74, 0x6a, 0x60, 0x56, 0x5c, 0x42, 0x48
]


def bytes_to_dwords(b: bytes) -> list:
    return list(struct.unpack('>4L', b))


def dwords_to_bytes(dwords: list) -> bytes:
    return struct.pack('>4L', *dwords)


def dword_from_bytes(x0: int, x1: int, x2: int, x3: int) -> int:
    return int.from_bytes([x0, x1, x2, x3], 'big')


def swap_bytes_order(dword: int) -> int:
    return int.from_bytes(dword.to_bytes(4, 'little'), 'big')


def f0(rk: int, x: int) -> int:
    # Step 1
    t = rk ^ x

    # Step 2
    t0 = S0[(t >> 24) & 0xFF]
    t1 = S1[(t >> 16) & 0xFF]
    t2 = S0[(t >> 8) & 0xFF]
    t3 = S1[t & 0xFF]

    # Step 3
    y0 = t0 ^ mul2[t1] ^ mul4[t2] ^ mul6[t3]
    y1 = mul2[t0] ^ t1 ^ mul6[t2] ^ mul4[t3]
    y2 = mul4[t0] ^ mul6[t1] ^ t2 ^ mul2[t3]
    y3 = mul6[t0] ^ mul4[t1] ^ mul2[t2] ^ t3
    return dword_from_bytes(y0, y1, y2, y3)


def f1(rk: int, x: int) -> int:
    # Step 1
    t = rk ^ x

    # Step 2
    t0 = S1[(t >> 24) & 0xFF]
    t1 = S0[(t >> 16) & 0xFF]
    t2 = S1[(t >> 8) & 0xFF]
    t3 = S0[t & 0xFF]

    # Step 3
    y0 = t0 ^ mul8[t1] ^ mul2[t2] ^ mulA[t3]
    y1 = mul8[t0] ^ t1 ^ mulA[t2] ^ mul2[t3]
    y2 = mul2[t0] ^ mulA[t1] ^ t2 ^ mul8[t3]
    y3 = mulA[t0] ^ mul2[t1] ^ mul8[t2] ^ t3
    return dword_from_bytes(y0, y1, y2, y3)


def gfn4(r: int, rk: list, x: list) -> list:
    """4-branch Generalized Feistel Network function"""
    # Step 1
    t0 = x[0]
    t1 = x[1]
    t2 = x[2]
    t3 = x[3]

    # Step 2
    for i in range(r):
        # Step 2.1
        t1 ^= f0(rk[2 * i], t0)
        t3 ^= f1(rk[2 * i + 1], t2)
        t0, t1, t2, t3 = t1, t2, t3, t0

    # Step 3
    return [t3, t0, t1, t2]


def gfn4i(r: int, rk: list, x: list) -> list:
    """4-branch Generalized Feistel Network inverse function"""
    # Step 1
    t0 = x[0]
    t1 = x[1]
    t2 = x[2]
    t3 = x[3]

    # Step 2
    for i in range(r):
        # Step 2.1
        t1 ^= f0(rk[((r - i) << 1) - 2], t0)
        # Step 2.2
        t3 ^= f1(rk[((r - i) << 1) - 1], t2)
        t0, t1, t2, t3 = t3, t0, t1, t2

    # Step 3
    return [t1, t2, t3, t0]


def sigma(x: list) -> list:
    """The double-swap function sigma"""
    y0 = (x[0] << 7) & 0xffffff80 | (x[1] >> 25)
    y1 = (x[1] << 7) & 0xffffff80 | (x[3] & 0x7f)
    y2 = (x[0] & 0xfe000000) | (x[2] >> 7)
    y3 = (x[2] << 25) & 0xfe000000 | (x[3] >> 7)
    return [y0, y1, y2, y3]


def keyschedule(k: list) -> (list, list):
    """Generate round/whitening keys from a 256-bit key"""
    # Step 1
    l = gfn4(12, CON_128, k)

    # Step 2
    wk = k[:]
    rk = [0] * 36

    # Step 3
    for i in range(0, 36, 4):
        t0 = l[0] ^ CON_128[24 + i]
        t1 = l[1] ^ CON_128[25 + i]
        t2 = l[2] ^ CON_128[26 + i]
        t3 = l[3] ^ CON_128[27 + i]

        l = sigma(l)

        if i & 4:
            t0 ^= k[0]
            t1 ^= k[1]
            t2 ^= k[2]
            t3 ^= k[3]

        rk[i] = t0
        rk[i + 1] = t1
        rk[i + 2] = t2
        rk[i + 3] = t3

    return wk, rk


def encrypt_block(p: list, wk: list, rk: list) -> list:
    # Step 1
    t = p[:]
    t[1] ^= wk[0]
    t[3] ^= wk[1]

    # Step 2
    y = gfn4(18, rk, t)

    # Step 3
    y[1] ^= wk[2]
    y[3] ^= wk[3]
    return y


def decrypt_block(c: list, wk: list, rk: list) -> list:
    # Step 1
    t = c[:]
    t[1] ^= wk[2]
    t[3] ^= wk[3]

    # Step 2
    y = gfn4i(18, rk, t)

    # Step 3
    y[1] ^= wk[0]
    y[3] ^= wk[1]
    return y


def decrypt_cbc(encrypted_data: bytes, key: bytes, iv: bytes) -> bytes:
    wk, rk = keyschedule(bytes_to_dwords(key))

    cv = iv

    data = bytearray()

    for i in range(0, len(encrypted_data), 16):
        c = encrypted_data[i:i + 16]
        data.extend(c ^ k for c, k in zip(dwords_to_bytes(decrypt_block(bytes_to_dwords(c), wk, rk)), cv))
        cv = c

    return data


def decrypt_ctr(encrypted_data: bytes, key: bytes, nonce: bytes) -> bytearray:
    wk, rk = keyschedule(bytes_to_dwords(key))

    n = bytes_to_dwords(nonce)
    counter = swap_bytes_order(n[3])

    data = bytearray()

    for i in range(0, len(encrypted_data), 16):
        n[3] = swap_bytes_order(counter)
        data.extend(c ^ k for c, k in zip(encrypted_data[i:i + 16], dwords_to_bytes(encrypt_block(n, wk, rk))))
        counter = (counter + 1) & 0xFFFFFFFF

    return data
